Encapsulation
    Encapsulation is tightening the bow of your classes even more by 'hiding' certain or all member variables from the rest of the program. The idea is to 
make these attributes only accessible by methods and other code inside of that class. By doing this, you further restrict the code and increase the
abstraction so that you as the programmer can worry more about the functional code, and less about the abstracted code among the classes. Encapsulation prevents
attributes from being mistakenly changed or altered to unintended values. It also means that if there is something wrong with the attribute value, you know it
must be a problem with the 'getters or setters' that modify the attribute, because these are the only thigns able to access the member variables, making
debugging much easier. One possible application of encapsulation would be to make a class with these private attributes that can store things like a list of
numbers. Then making methods to add or remove values in that list. By doing all of this, you can now make the actual program code far simpler by having these
abstracted and self made methods to modify this list however you like, yet make it unmodifiable by mistake because of its encapsulation.

Code example
public class Word
{
    private bool _hidden;  // Encapsulated attributes storing word and hide status
    private string _word;
    private string _rememberWord;


    public void Show() // Returns original word
    {
        _word = _rememberWord;
        _hidden = false;
    }
}

